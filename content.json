{"meta":{"title":"mirindalover的博客","subtitle":"you see see you one day day","description":"还是有个自己的博客好","author":"mirindalover","url":"https://mirindalover.github.io","root":"/"},"pages":[{"title":"tags","date":"19/06/2019","updated":"19/06/2019","comments":true,"path":"tags/index.html","permalink":"https://mirindalover.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Android单元测试-UI","slug":"Android单元测试-UI","date":"26/06/2019","updated":"27/06/2019","comments":true,"path":"basics/Android单元测试-UI.html","link":"","permalink":"https://mirindalover.github.io/basics/Android单元测试-UI.html","excerpt":"","text":"前言UI单元测试使用官方的Espresso在开发中对于重要的功能可编写单元测试,为防止后期的修改影响功能,每次开发完跑一遍测试即可保证功能的完整性 友情链接官网指南Google官方测试Sample地址本文demoEspresso本文demo使用官网的内容demo内容介绍MainActivity输入框输入文字后 点击change按钮：设置内容到TextView上 点击open按钮：打开一个Activity,同时把内容传递过去,用来显示到TextView上Espresso依赖12345678dependencies &#123; //test testImplementation 'junit:junit:4.12' androidTestImplementation 'androidx.test:runner:1.1.0' androidTestImplementation 'androidx.test:rules:1.1.0' //espresso androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'&#125; 环境依赖12345android &#123; defaultConfig &#123; testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\" &#125;&#125; 添加单元测试任务 Run&gt;Edit Configurations 添加一个Android Instrumented Tests 选择对应的module 选择真机或者模拟器 如果选择真机：关闭开发者选项&gt;绘画&gt;窗口动画缩放;过滤动画缩放;动画程序时长缩放编写单元测试我们先验证应用是否开启了,直接验证是否有Hello World12345678910111213@RunWith(AndroidJUnit4.class)@LargeTestpublic class ChangeTextBehaviorTest &#123; @Rule public ActivityTestRule&lt;MainActivity&gt; activityRule = new ActivityTestRule&lt;&gt;(MainActivity.class, false, true); @Test public void listGoesOverTheFold() &#123; onView(withText(\"Hello world!\")).check(matches(isDisplayed())); &#125;&#125; 其中@LargeTest可根据自己情况来改变,具体见下图 @Rule定义测试启动的Activity @Test来测试方法 常用的Espresso的API onView 查找元素;onData() 查找AdapterView元素 withText()通过文字查找 withId()通过id查找 allOf()匹配多个条件-org.hamcrest.Matchers perform 执行操作 click点击 typeText点击并且输入一个值;最好结合closeSoftKeyboard scrollTo滑动-onView必须是ScrollView pressKey按键 clearText清空view的文字 check 验证结果 matches 所有的API可见官方给出的图示 如果我们启动的Activity不是MainActivity,而且需要intent传值,则可以使用下面的代码 1234567891011121314151617181920212223@RunWith(AndroidJUnit4.class)@LargeTestpublic class TextShowTextActivity &#123; private static final String MESSAGE = \"12312\"; @Rule public ActivityTestRule&lt;ShowTextActivity&gt; activityRule = new ActivityTestRule&lt;ShowTextActivity&gt;(ShowTextActivity.class, false, true)&#123; @Override protected Intent getActivityIntent() &#123; Intent result = new Intent(); result.putExtra(ShowTextActivity.KEY_EXTRA_MESSAGE, MESSAGE); return result; &#125; &#125;; @Test public void listGoesOverTheFold() &#123; onView(withText(MESSAGE)).check(matches(isDisplayed())); &#125;&#125; 使用intent单独测试Activity即可以获取即将打开Activity的intent来检查一个Activity的完成性 官方指南 依赖 1234dependencies &#123; //intent androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.0'&#125; 改变Rule 12@Rulepublic IntentsTestRule&lt;MyActivity&gt; intentsTestRule = new IntentsTestRule&lt;&gt;(MyActivity.class); 测试代码如下 1234567891011121314151617181920212223242526272829@RunWith(JUnit4.class)@LargeTestpublic class ChangePageBehaviorTest &#123; private static final String MESSAGE = \"This is a test\"; private static final String PACKAGE_NAME = \"com.mlc.android_test\"; @Rule public IntentsTestRule&lt;MainActivity&gt; intentsRule = new IntentsTestRule&lt;&gt;(MainActivity.class); @Test public void verifyMessageSentToMessageActivity() &#123; // Types a message into a EditText element. onView(withId(R.id.editTextUserInput)) .perform(typeText(MESSAGE), closeSoftKeyboard()); // Clicks a button to send the message to another // activity through an explicit intent. onView(withId(R.id.activityChangeTextBtn)).perform(click()); // Verifies that the DisplayMessageActivity received an intent // with the correct package name and message. intended(allOf( hasComponent(hasShortClassName(\".ShowTextActivity\")), toPackage(PACKAGE_NAME), hasExtra(ShowTextActivity.KEY_EXTRA_MESSAGE, MESSAGE))); &#125;&#125; UiAutomatorUIAutomator主要用于多个应用之间的测试由于目前没有好的例子,Demo中也只是使用了官方的用例,这里只给出链接 官方指南测试原理浅析首先我们需要了解Activity的开启流程,可以参考我总结的Activity启动流程Activity需要通过Instrumentation来与系统交互的,单元测试中其实也一样，通过它来开启Activity我们从ActivityTestRule来作为入口12345678910111213141516171819#ActivityTestRule/** * Launches the Activity under test. */ public T launchActivity(@Nullable Intent startIntent) &#123; //... if (null == startIntent) &#123; startIntent = getActivityIntent(); if (null == startIntent) &#123; startIntent = new Intent(Intent.ACTION_MAIN); &#125; &#125; if (null == startIntent.getComponent()) &#123; startIntent.setClassName(targetPackage, activityClass.getName()); &#125; T hardActivityRef = activityClass.cast(instrumentation.startActivitySync(startIntent)); //... return hardActivityRef; &#125; 启动Activity是通过launchActivity()方法来启动，看做了什么操作: 设置intent 使用instrumentation.startActivitySync()开启Activity到这里我们已经清楚单元测试也与普通的应用一样，是用instrumentation来开启Activity题外话其实这个instrumentation是MonitoringInstrumentation12345678910111213141516171819202122232425262728293031323334353637383940#MonitoringInstrumentation @Override public Activity startActivitySync(final Intent intent) &#123; checkNotMainThread(); Future&lt;Activity&gt; startedActivity = executorService.submit( new Callable&lt;Activity&gt;() &#123; @Override public Activity call() &#123; return MonitoringInstrumentation.super.startActivitySync(intent); &#125; &#125;); try &#123; return startedActivity.get(START_ACTIVITY_TIMEOUT_SECONDS, TimeUnit.SECONDS); &#125; catch (TimeoutException te) &#123; dumpThreadStateToOutputs(\"ThreadState-startActivityTimeout.txt\"); startedActivity.cancel(true); throw new RuntimeException( String.format( \"Could not launch intent %s within %s seconds.\" + \" Perhaps the main thread has not gone idle within a reasonable amount of \" + \"time? There could be an animation or something constantly repainting the \" + \"screen. Or the activity is doing network calls on creation? See the \" + \"threaddump logs. For your reference the last time the event queue was idle \" + \"before your activity launch request was %s and now the last time the queue \" + \"went idle was: %s. If these numbers are the same your activity might be \" + \"hogging the event queue.\", intent, START_ACTIVITY_TIMEOUT_SECONDS, lastIdleTimeBeforeLaunch, lastIdleTime.get())); &#125; catch (ExecutionException ee) &#123; throw new RuntimeException(\"Could not launch activity\", ee.getCause()); &#125; catch (InterruptedException ie) &#123; Thread.currentThread().interrupt(); throw new RuntimeException(\"interrupted\", ie); &#125; &#125; 我们看到是通过线程池来开启，获取Future后，设置了超时时间45s。在我们设置activity有问题时经常出现 Tips 真机运行可能需要安装应用后开启手机允许后台弹出界面权限","author":"砖头","categories":[{"name":"基础","slug":"basics","permalink":"https://mirindalover.github.io/categories/basics/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://mirindalover.github.io/tags/Android/"},{"name":"单元测试","slug":"unit","permalink":"https://mirindalover.github.io/tags/unit/"}]},{"title":"hexo+github搭建个人博客","slug":"hexo-github搭建个人博客","date":"19/06/2019","updated":"26/06/2019","comments":true,"path":"notes/hexo-github搭建个人博客.html","link":"","permalink":"https://mirindalover.github.io/notes/hexo-github搭建个人博客.html","excerpt":"","text":"前言免费搭建个人博客,可以使用github+hexo来完成 hexo 简洁的博客框架：配置简单,多种主题,可以本地浏览官网 前期准备 git工具Node.js hexo常用命令1234567891011//构建静态文件hexo g//开启服务器,默认http://localhost:4000///ctrl+c停止hexo s//部署到远端(github)hexo d//清除缓存hexo clean//创建文章,默认存放路径通过default_layout参数配置hexo n &#123;标题&#125; 创建本地博客 安装Hexo 1npm install -g hexo-cli 新建文件夹,命令行初始化hexo 12hexo initnpm install scaffolds文件夹：一些模板文件,后面会进行修改source文件夹：一些编译需要的,如文章themes文件夹：存放主题_config.yml文件：博客的主要配置package.json文件：一些依赖的插件 预览博客12hexo ghexo s 预览一下默认的博客public文件夹中即为生成的静态页面 改变主题在Hexo官网找到我们喜欢的主题,根据主题说明配置即可发布到github在github上创建仓库名字为：{名字}.github.io 的仓库在根目录的_config.yml文件进行配置,参考如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980# Sitetitle: xxx的博客 # 修改subtitle: description: author: xxxlanguage: zh-cntimezone:# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://xxx.github.io/ # 修改root: /permalink: :category/:title.html # 文章的urlpermalink_defaults: lang: en# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: 随笔 # 默认页面category_map: 随笔: notes #分类 tag_map: # 标签 Java: Java# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: xxx #修改# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/xxx #修改 为仓库地址 branch: master 重点是deploy属性,修改为自己的仓库地址也可以使用ssh来配置,也可以直接使用https的地址发布： 12hexo ghexo d .deploy_git文件即为与git仓库关联的文件夹 配置模板在scaffolds文件夹中,可以配置我们创建文章的模板post.md配置 123456789101112---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;author: xxxavatar: /images/xx.pngauthorDesc: categories: # 分类tags: #标签 - Javaphotos:- xxx.jpg #缩略图--- 这样我们创建文章的时候，会根据配置生成 关于标签我们在打开标签页面的时候可能为空原因是public\\tags目录下没有index.html 创建tags1hexo new page tags 生成source/tags/index.md文件配置index.md标签文件 123456---title: tagsdate: 2019-06-19 15:02:26type: \"tags\"layout: \"tags\"--- 根_config.yml添加tag_map列表文章中添加标签 关于插件安装插件都可通过官网来寻找如何配置的例如搜索插件插件配置 Tips 配置时冒号后面需要有空格 安装插件报错12xxxA@10.0.1 requires a peer of xxxB@&gt;= 4.12.1 but none isinstalled. You must install peer dependencies yourself. 我们可以直接根据提示，安装必要的依赖 1npm install xxxB@4. xxxB@10. --save-dev","author":"砖头","categories":[{"name":"随笔","slug":"notes","permalink":"https://mirindalover.github.io/categories/notes/"}],"tags":[{"name":"杂谈","slug":"talk","permalink":"https://mirindalover.github.io/tags/talk/"}]}]}