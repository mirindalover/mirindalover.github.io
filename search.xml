<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android-MVP</title>
      <link href="/elite/Android-MVP.html"/>
      <url>/elite/Android-MVP.html</url>
      
        <content type="html"><![CDATA[<h3 id="MVP介绍"><a href="#MVP介绍" class="headerlink" title="MVP介绍"></a>MVP介绍</h3><p>MVP设计模式分成了View、Presenter、Model层，不同于原来的MVC，view中不在存放业务逻辑-只是展示页面，而由Presenter来统筹全局-处理逻辑<br>介绍几个官方MVP的写法<br><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp" target="_blank" rel="noopener">官方Demo</a><br><a href="https://github.com/antoniolg/androidmvp" target="_blank" rel="noopener">优秀实践</a><br><a href="https://github.com/RobertApikyan/LifecycleMvp" target="_blank" rel="noopener">MVP与Lifecycle结合</a></p><h3 id="MVP分析"><a href="#MVP分析" class="headerlink" title="MVP分析"></a>MVP分析</h3><p>官方MVP建议使用Activity里面创建Presenter,View使用Fragment，一图胜千言<br><img src="/images/google-mvp.png" alt="链接图片" title="google"> </p><p>实际中，我们的view可以是Activity或者Fragment,完全不需要一个Activity来嵌套一层view</p><p>####MVP模式封装</p><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>首先View接口，我们没有特定的方法需要实现，但是为了配合Presenter，我们的IView是个空接口。后面view只是简单的实现即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMvpView</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h4><p>Presenter中需要与View绑定，同时还需要知道view的生命周期-至少知道attach和detach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMvpPresenter</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">IMvpView</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化Presenter时,用于presenter与view绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBind</span><span class="params">(V view)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewAttach</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewDetach</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Presenter的基类"><a href="#Presenter的基类" class="headerlink" title="Presenter的基类"></a>Presenter的基类</h4><p>Presenter中公共的，我们会做与view的绑定和解绑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MvpPresenter</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">IMvpView</span>&gt; <span class="keyword">implements</span> <span class="title">IMvpPresenter</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> V mView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBind</span><span class="params">(V view)</span> </span>&#123;</span><br><span class="line">        mView = view;</span><br><span class="line">        <span class="keyword">if</span> (view <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">            mContext = ((Fragment) view).getContext();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">            mContext = (Activity) view;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> View) &#123;</span><br><span class="line">            mContext = ((View) view).getContext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttach</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDetach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mView = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在detach时吧mView置空，会导致调用mView出现空指针问题</li></ul><p>这里我想过使用生成代码的方式判断mView的值,但是一直无法完美的实现。最后使用了<a href="https://java-design-patterns.com/patterns/null-object/" target="_blank" rel="noopener">空对象设计模式</a>来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> V mView;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> V <span class="title">getView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> createDummyView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> V <span class="title">createDummyView</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="Helper类"><a href="#Helper类" class="headerlink" title="Helper类"></a>Helper类</h4><p>View与Presenter的绑定,可以简单的在创建presenter的时候手动调用，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#View(Fragment|Activity)</span><br><span class="line"><span class="keyword">new</span> XPresenter().onBind(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>但是不乏我们忘记，所以可以写一个帮助类来完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvpLifecycleHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把View和Presenter关联起来</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V extends IMvpView, P extends IMvpPresenter&lt;? <span class="keyword">super</span> V&gt;&gt; <span class="function">P <span class="title">from</span><span class="params">(V view, P presenter)</span> </span>&#123;</span><br><span class="line">   presenter.onBind(view);</span><br><span class="line">   <span class="keyword">return</span> presenter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里写泛型的时候出现了一些小问题，可以查看<a href="https://mirindalover.github.io/notes/%E6%B3%9B%E5%9E%8B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8.html">另一篇博客</a><br>这样我们绑定的时候使用如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MvpLifecycleHelper.from(<span class="keyword">this</span>,<span class="keyword">new</span> LoginPresenter());</span><br></pre></td></tr></table></figure><p>到此我们的MVP的简单封装已经完成。<br>但是现在presenter的周期还是需要view手动去调用的，这样还是很不友好</p><h3 id="结合Lifecycle"><a href="#结合Lifecycle" class="headerlink" title="结合Lifecycle"></a>结合Lifecycle</h3><p>其实我们要做的也很简单，只需要在onBind中添加presenter给lifecycle，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PresenterLifecycle</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">IMvpView</span>&gt; <span class="keyword">extends</span> <span class="title">MvpPresenter</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">LifecycleObserver</span>, <span class="title">IPresenterLifecycle</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBind</span><span class="params">(V view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onBind(view);</span><br><span class="line">        <span class="keyword">if</span> (view <span class="keyword">instanceof</span> LifecycleOwner) &#123;</span><br><span class="line">            Lifecycle lifecycle = ((LifecycleOwner) view).getLifecycle();</span><br><span class="line">            <span class="comment">//会立马调用对应的监听</span></span><br><span class="line">            lifecycle.addObserver(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (lifecycle.getCurrentState().isAtLeast(Lifecycle.State.STARTED)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.onViewAttach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_CREATE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLifecycleSubject.onNext(Lifecycle.Event.ON_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_START)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLifecycleSubject.onNext(Lifecycle.Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_RESUME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLifecycleSubject.onNext(Lifecycle.Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_STOP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLifecycleSubject.onNext(Lifecycle.Event.ON_STOP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_DESTROY)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDetach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLifecycleSubject.onNext(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">        <span class="keyword">super</span>.onViewDetach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于addObserver时，会调用一次对应的周期，所以我们可以完全不用手动调用onViewAttach()。<br>唯一存在的可能是我们在onResume才绑定presenter(这种可能很低)，所以添加了一下周期判断</p><p>至此整个封装完成，源码已经同步到github，可<a href="https://github.com/mirindalover/android-mvp" target="_blank" rel="noopener">下载使用</a></p>]]></content>
      
      
      <categories>
          
          <category> 精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> MVP </tag>
            
            <tag> Lifecycle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型日常使用</title>
      <link href="/notes/%E6%B3%9B%E5%9E%8B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8.html"/>
      <url>/notes/%E6%B3%9B%E5%9E%8B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在封装MVP模式时,由于Presenter与View的base接口用了泛型进行限制,将View与Presenter关联起来时导致编译无法通过。因此唠叨一番</p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>直接上base的view和presenter,同时看看大家能解决关联的问题吗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#View</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMvpView</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#Presenter</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMvpPresenter</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">IMvpView</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 初始化Presenter时,用于presenter与view绑定</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onBind</span><span class="params">(V view)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onViewAttach</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onViewDetach</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在要写一个帮助方法来讲View和Presenter结合起来,即调用onBind方法</p><p>最简单的莫过于,直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoginView</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">new</span> LoginPresenter().onBind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是那岂不是所有的view里面创建presenter后接着调用onBind方法，因此写了下面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#帮助类里</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V extends IMvpView, P extends IMvpPresenter&lt;V&gt;&gt; <span class="function">P <span class="title">from</span><span class="params">(V view, P presenter)</span> </span>&#123;</span><br><span class="line">presenter.onBind(view);</span><br><span class="line">    <span class="keyword">return</span> presenter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看方法貌似没有啥问题,但是当你使用的是会报错的。要求presenter的泛型必须是LoginView类。<br>看一下我们写的确实是有问题，V当成泛型直接给了IMvpPresenter。那我们要怎么写才能避免这种报错呢<br>我采用<strong>大多数问题都可以通过引入第三方的方式来解决(类、变量等)</strong>的原则，所以写出了下面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends IMvpView, P extends IMvpPresenter&lt;T&gt;, V extends T&gt; <span class="function">P <span class="title">from</span><span class="params">(V view, P presenter)</span> </span>&#123; <span class="comment">//需要使用T作为中介</span></span><br><span class="line">   presenter.onBind(view);</span><br><span class="line">    <span class="keyword">return</span> presenter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题解决，但是下面介绍一种其他方法,使用通配符</p><h4 id="泛型的一些知识"><a href="#泛型的一些知识" class="headerlink" title="泛型的一些知识"></a>泛型的一些知识</h4><p>这里我有一些总结,可以大体看一下。<a href="https://github.com/mirindalover/SkillLearning/blob/master/java/%E6%B3%A8%E8%A7%A3%E5%92%8C%E6%B3%9B%E5%9E%8B.md" target="_blank" rel="noopener">泛型</a><br>其中通配符用?表示，由于他的类型表示一组未知的类型,所以我们即使写成IMvpPresenter&lt;?&gt;也不会报错。<br>我们利用这一点，写出下面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V extends IMvpView, P extends IMvpPresenter&lt;? <span class="keyword">super</span> V&gt;&gt; <span class="function">P <span class="title">from</span><span class="params">(V view, P presenter)</span> </span>&#123;</span><br><span class="line">   presenter.onBind(view);</span><br><span class="line">    <span class="keyword">return</span> presenter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通配符虽然可以绕过声明的报错，但是使用时还是要遵循泛型的边界的,所以这里用到了super V。同时限制V的类型</p><p>本文只是记录日常开发遇到的小问题，没有深入研究，对此感到抱歉，后期会对泛型进行详细研究</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJava初探</title>
      <link href="/elite/RxJava%E5%88%9D%E6%8E%A2.html"/>
      <url>/elite/RxJava%E5%88%9D%E6%8E%A2.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文使用RxJava2.x，仅作为入门笔记，后续持续更新。本文所有代码使用junit测试可直接运行</p><ul><li>友情链接<br><a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">官网操作符</a><br><a href="https://www.jianshu.com/p/464fa025229e" target="_blank" rel="noopener">入门博客</a></li></ul><p>集成</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RxJava+RxAndroid</span></span><br><span class="line">implementation <span class="string">"io.reactivex.rxjava2:rxjava:2.2.10"</span></span><br><span class="line">implementation <span class="string">'io.reactivex.rxjava2:rxandroid:2.1.1'</span></span><br></pre></td></tr></table></figure><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>RxJava2.x有2种观察模式:</p><ol><li>Observable-&gt;Observer不支持背压</li><li>Flowable-&gt;Subscriber支持背压</li></ol><p>被观察者也叫做上游,下游即为观察者<br>被观察者可以想象成通过流的形式发送数据</p><h4 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            emitter.onNext(<span class="string">"1"</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"2"</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"3"</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"4"</span>);</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">            emitter.onNext(<span class="string">"5"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onComplete"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用的是Observer，如果我们只关心onNext事件,可以使用Consumer来替换Observer</p><ol><li>emitter用来发送流</li><li>Disposable 可以切断上游和下游的联系,<strong>但是上游还会发送事件</strong><h4 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h4></li><li>subscribeOn()指定上游发送事件的线程(多次指定，只有第一次有效)</li><li>observeOn()下游接受事件的线程(可以多次切换,与doOnNext对应)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            emitter.onNext(<span class="string">"1"</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"2"</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"3"</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"4"</span>);</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">            emitter.onNext(<span class="string">"5"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).subscribeOn(Schedulers.io())</span><br><span class="line">            .observeOn(Schedulers.io())</span><br><span class="line">            .doOnNext(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"doOnNext: Thread = "</span> + Thread.currentThread() + <span class="string">"value ="</span> + s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .observeOn(Schedulers.newThread())</span><br><span class="line">            .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"subscribe: Thread = "</span> + Thread.currentThread() + <span class="string">"value ="</span> + s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="流的转化"><a href="#流的转化" class="headerlink" title="流的转化"></a>流的转化</h4><ol><li>map-对每个流操作后继续流出(改变每个流的输入继续当输入。可改变输入的类型和值)</li><li>flatMap-对每个流可进行转换,转换为新的Observable(根据输入重新开始流，不保证顺序)</li><li>concatMap-与flatMap类似,保证顺序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mapTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             emitter.onNext(<span class="string">"1"</span>);</span><br><span class="line">             emitter.onNext(<span class="string">"2"</span>);</span><br><span class="line">             emitter.onNext(<span class="string">"3"</span>);</span><br><span class="line">             emitter.onNext(<span class="string">"4"</span>);             </span><br><span class="line">             emitter.onComplete();</span><br><span class="line">             emitter.onNext(<span class="string">"5"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).map(<span class="keyword">new</span> Function&lt;String, String&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> s + <span class="string">"+map"</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).flatMap(<span class="keyword">new</span> Function&lt;String, ObservableSource&lt;String&gt;&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> ObservableSource&lt;String&gt; <span class="title">apply</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> Observable.just(s + <span class="string">"+flatMap"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">"subscribe: Thread = "</span> + Thread.currentThread() + <span class="string">"value ="</span> + s);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="流的组合"><a href="#流的组合" class="headerlink" title="流的组合"></a>流的组合</h4><ul><li>zip-将2个流组合起来<blockquote><p>必须拿到2个流才能组合，所以下游收到的流次数即为发送最少的上游的次数</p><p>一个流结束,整个过程结束同时上游也会结束</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zipTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.zip(Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            emitter.onNext(<span class="string">"1"</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"2"</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"3"</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"4"</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"5"</span>);</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">            emitter.onNext(<span class="string">"6"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).subscribeOn(Schedulers.io()), Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            emitter.onNext(<span class="string">"A"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"B"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"C"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"D"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            emitter.onNext(<span class="string">"E"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;), <span class="keyword">new</span> BiFunction&lt;String, String, String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String s, String s2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s + <span class="string">"-"</span> + s2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onComplete"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="流的过滤"><a href="#流的过滤" class="headerlink" title="流的过滤"></a>流的过滤</h4><p>我们可以根据条件过滤掉上游的数据,这样上游相当于会丢失一部分数据</p><ul><li>filter-对流进行过滤，满足条件可通过(可减少下游压力)</li><li>sample-周期的去取<strong>最近</strong>的一次(如果想取周期的第一次可以使用throttleFirst)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filterTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                 emitter.onNext(i);</span><br><span class="line">                 Thread.sleep(<span class="number">10</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             emitter.onComplete();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).filter(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> integer % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"><span class="comment">//                .throttleFirst(50,TimeUnit.MILLISECONDS)</span></span><br><span class="line">             .sample(<span class="number">50</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">             .observeOn(Schedulers.io())</span><br><span class="line">             .subscribeOn(Schedulers.io())</span><br><span class="line">             .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                     System.out.println(integer);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="流的条件运算"><a href="#流的条件运算" class="headerlink" title="流的条件运算"></a>流的条件运算</h4><p>计算多个观测对象的运算符</p><ul><li>TakeUntil-第二个观察对象发出流或者终止后，结束订阅，丢弃观测对象的任何流(不是终止观测对象)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeUntilTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"onNext=="</span> + i);</span><br><span class="line">                emitter.onNext(String.valueOf(i));</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).takeUntil(Observable.interval(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.MILLISECONDS).doOnNext(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(aLong);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">            .subscribeOn(Schedulers.io())</span><br><span class="line">            .subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"error"</span> + e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"complete"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Flowable"><a href="#Flowable" class="headerlink" title="Flowable"></a>Flowable</h4><p>另一种观察模式是使用Flowable,同时他支持背压。建议只在需要的时候使用,其他情况还是使用Observable<br>先来看例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backPressureTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//                System.out.println(Thread.currentThread());</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++) &#123;</span><br><span class="line"><span class="comment">//                    if (emitter.requested() &gt; 0) &#123;</span></span><br><span class="line">                emitter.onNext(String.valueOf(i));</span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, BackpressureStrategy.ERROR)</span><br><span class="line">            .subscribeOn(Schedulers.io())</span><br><span class="line"><span class="comment">//                .observeOn(Schedulers.io())</span></span><br><span class="line">            .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                        System.out.println(Thread.currentThread());</span></span><br><span class="line">                    s.request(<span class="number">90</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"error"</span> + t);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onComplete"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用Subscriber来订阅。也可以使用Consumer(但这样其实与用Observable没有什么区别)</li><li>与Observable不同的是:<ol><li>上游可以知道下游的处理能力,来做出相应的策略(FlowableEmitter.requested()即为下游可处理的事件)</li><li>上游的流可以存放起来等待下游处理(由bufferSize控制存放的最大量)</li></ol></li><li>其实我们使用的时候关心的核心就是2个：下游的处理能力、上游的缓存最大数量</li></ul><ol><li>默认下游的处理能力为0</li><li>增加下游处理能力：使用Subscription .request()来增加</li><li>减少下游处理能力：当上游发送流即emitter.onNext()时</li><li>上游的缓存默认为0</li><li>当上游无法缓存时,会走背压策略即BackpressureStrategy即create时的第二个参数</li><li>可以通过observeOn指定缓存最大数量,调用但是不指定内部会有默认值128</li></ol><ul><li>Subscription和FlowableEmitter<br>这里贴出一个结论(如何得到的结论，以后会进行源码分析)</li></ul><ol><li>当不切换线程或者只指定上游的线程即subscribeOn时。Subscription和FlowableEmitter是同一个对象<blockquote><p>我们Subscription.request()设置后上游的FlowableEmitter.requested()会立马改变</p></blockquote></li><li>当上游和下游都指定了线程。Subscription和FlowableEmitter是不同的对象，这里就涉及到下游的处理能力同步给上游的问题<blockquote><p>开始上游FlowableEmitter的requested()为128<br>下游Subscription,request()96以后，上游的FlowableEmitter会更新到128<br>即不是实时同步的</p></blockquote></li></ol><h4 id="后续问题"><a href="#后续问题" class="headerlink" title="后续问题"></a>后续问题</h4><p>关于背压的后续分析问题：</p><ol><li>Subscription和FlowableEmitter分别是什么时候赋值的</li><li>不同线程的时候Subscription和FlowableEmitter如何同步</li></ol>]]></content>
      
      
      <categories>
          
          <category> 精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android单元测试-UI</title>
      <link href="/basics/Android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-UI.html"/>
      <url>/basics/Android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-UI.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>UI单元测试使用官方的Espresso<br>在开发中对于重要的功能可编写单元测试,为防止后期的修改影响功能,每次开发完跑一遍测试即可保证功能的完整性</p><ul><li>友情链接<br><a href="https://developer.android.google.cn/training/testing/ui-testing/espresso-testing.html" target="_blank" rel="noopener">官网指南</a><br><a href="https://github.com/googlesamples/android-testing" target="_blank" rel="noopener">Google官方测试Sample地址</a><br><a href="https://github.com/mirindalover/android-test.git" target="_blank" rel="noopener">本文demo</a><h3 id="Espresso"><a href="#Espresso" class="headerlink" title="Espresso"></a>Espresso</h3>本文demo使用官网的内容<h4 id="demo内容介绍"><a href="#demo内容介绍" class="headerlink" title="demo内容介绍"></a>demo内容介绍</h4>MainActivity输入框输入文字后</li></ul><ol><li>点击change按钮：设置内容到TextView上</li><li>点击open按钮：打开一个Activity,同时把内容传递过去,用来显示到TextView上<h4 id="Espresso依赖"><a href="#Espresso依赖" class="headerlink" title="Espresso依赖"></a>Espresso依赖</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"><span class="comment">//test</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test:runner:1.1.0'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test:rules:1.1.0'</span></span><br><span class="line">    <span class="comment">//espresso</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加单元测试任务"><a href="#添加单元测试任务" class="headerlink" title="添加单元测试任务"></a>添加单元测试任务</h4><ol><li>Run&gt;Edit Configurations</li><li>添加一个Android Instrumented Tests</li><li>选择对应的module</li><li>选择真机或者模拟器</li><li>如果选择真机：关闭开发者选项&gt;绘画&gt;窗口动画缩放;过滤动画缩放;动画程序时长缩放<h4 id="编写单元测试"><a href="#编写单元测试" class="headerlink" title="编写单元测试"></a>编写单元测试</h4>我们先验证应用是否开启了,直接验证是否有Hello World<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(AndroidJUnit4.class)</span><br><span class="line"><span class="meta">@LargeTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeTextBehaviorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivityTestRule&lt;MainActivity&gt; activityRule</span><br><span class="line">            = <span class="keyword">new</span> ActivityTestRule&lt;&gt;(MainActivity.class, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listGoesOverTheFold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        onView(withText(<span class="string">"Hello world!"</span>)).check(matches(isDisplayed()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>其中@LargeTest可根据自己情况来改变,具体见下图<br><img src="/images/larget-xx.png" alt="链接图片" title="api"> </li><li>@Rule定义测试启动的Activity</li><li>@Test来测试方法</li><li>常用的Espresso的API</li></ul><ol><li>onView 查找元素;onData() 查找AdapterView元素<blockquote><p>   withText()通过文字查找</p><pre><code>withId()通过id查找allOf()匹配多个条件-org.hamcrest.Matchers</code></pre></blockquote></li><li>perform 执行操作<blockquote><p>   click点击</p><pre><code>typeText点击并且输入一个值;最好结合closeSoftKeyboardscrollTo滑动-onView必须是ScrollViewpressKey按键clearText清空view的文字</code></pre></blockquote></li><li>check 验证结果<blockquote><p>   matches</p></blockquote></li><li>所有的API可见官方给出的图示<br><img src="/images/espresso-api.jpg" alt="链接图片" title="api"> </li></ol><p>如果我们启动的Activity不是MainActivity,而且需要intent传值,则可以使用下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(AndroidJUnit4.class)</span><br><span class="line"><span class="meta">@LargeTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextShowTextActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MESSAGE = <span class="string">"12312"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivityTestRule&lt;ShowTextActivity&gt; activityRule</span><br><span class="line">            = <span class="keyword">new</span> ActivityTestRule&lt;ShowTextActivity&gt;(ShowTextActivity.class, <span class="keyword">false</span>, <span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Intent <span class="title">getActivityIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Intent result = <span class="keyword">new</span> Intent();</span><br><span class="line">            result.putExtra(ShowTextActivity.KEY_EXTRA_MESSAGE, MESSAGE);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listGoesOverTheFold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        onView(withText(MESSAGE)).check(matches(isDisplayed()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用intent单独测试Activity"><a href="#使用intent单独测试Activity" class="headerlink" title="使用intent单独测试Activity"></a>使用intent单独测试Activity</h4><p>即可以获取即将打开Activity的intent来检查一个Activity的完成性</p><ul><li><p><a href="https://developer.android.google.cn/training/testing/espresso/intents.html" target="_blank" rel="noopener">官方指南</a></p></li><li><p>依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"><span class="comment">//intent</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-intents:3.1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>改变Rule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> IntentsTestRule&lt;MyActivity&gt; intentsTestRule = <span class="keyword">new</span> IntentsTestRule&lt;&gt;(MyActivity.class);</span><br></pre></td></tr></table></figure></li></ul><p>测试代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(JUnit4.class)</span><br><span class="line"><span class="meta">@LargeTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangePageBehaviorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MESSAGE = <span class="string">"This is a test"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_NAME = <span class="string">"com.mlc.android_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> IntentsTestRule&lt;MainActivity&gt; intentsRule =</span><br><span class="line">            <span class="keyword">new</span> IntentsTestRule&lt;&gt;(MainActivity.class);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verifyMessageSentToMessageActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Types a message into a EditText element.</span></span><br><span class="line">        onView(withId(R.id.editTextUserInput))</span><br><span class="line">                .perform(typeText(MESSAGE), closeSoftKeyboard());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clicks a button to send the message to another</span></span><br><span class="line">        <span class="comment">// activity through an explicit intent.</span></span><br><span class="line">        onView(withId(R.id.activityChangeTextBtn)).perform(click());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verifies that the DisplayMessageActivity received an intent</span></span><br><span class="line">        <span class="comment">// with the correct package name and message.</span></span><br><span class="line">        intended(allOf(</span><br><span class="line">                hasComponent(hasShortClassName(<span class="string">".ShowTextActivity"</span>)),</span><br><span class="line">                toPackage(PACKAGE_NAME),</span><br><span class="line">                hasExtra(ShowTextActivity.KEY_EXTRA_MESSAGE, MESSAGE)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UiAutomator"><a href="#UiAutomator" class="headerlink" title="UiAutomator"></a>UiAutomator</h3><p>UIAutomator主要用于多个应用之间的测试<br>由于目前没有好的例子,Demo中也只是使用了官方的用例,这里只给出链接</p><ul><li><a href="https://developer.android.google.cn/training/testing/ui-testing/uiautomator-testing" target="_blank" rel="noopener">官方指南</a><h3 id="测试原理浅析"><a href="#测试原理浅析" class="headerlink" title="测试原理浅析"></a>测试原理浅析</h3>首先我们需要了解Activity的开启流程,可以参考我总结的<a href="https://github.com/mirindalover/SkillLearning/blob/master/android/activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.md" target="_blank" rel="noopener">Activity启动流程</a><br>Activity需要通过Instrumentation来与系统交互的,单元测试中其实也一样，通过它来开启Activity<br>我们从ActivityTestRule来作为入口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#ActivityTestRule</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Launches the Activity under test.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">launchActivity</span><span class="params">(@Nullable Intent startIntent)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == startIntent) &#123;</span><br><span class="line">      startIntent = getActivityIntent();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">null</span> == startIntent) &#123;        </span><br><span class="line">        startIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == startIntent.getComponent()) &#123;</span><br><span class="line">      startIntent.setClassName(targetPackage, activityClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    T hardActivityRef = activityClass.cast(instrumentation.startActivitySync(startIntent));</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> hardActivityRef;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>启动Activity是通过launchActivity()方法来启动，看做了什么操作:</p><ol><li>设置intent</li><li>使用instrumentation.startActivitySync()开启Activity<br>到这里我们已经清楚单元测试也与普通的应用一样，是用instrumentation来开启Activity<h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4>其实这个instrumentation是MonitoringInstrumentation<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#MonitoringInstrumentation</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Activity <span class="title">startActivitySync</span><span class="params">(<span class="keyword">final</span> Intent intent)</span> </span>&#123;</span><br><span class="line">    checkNotMainThread();   </span><br><span class="line">    Future&lt;Activity&gt; startedActivity =</span><br><span class="line">        executorService.submit(</span><br><span class="line">            <span class="keyword">new</span> Callable&lt;Activity&gt;() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> Activity <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> MonitoringInstrumentation.<span class="keyword">super</span>.startActivitySync(intent);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> startedActivity.get(START_ACTIVITY_TIMEOUT_SECONDS, TimeUnit.SECONDS);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TimeoutException te) &#123;</span><br><span class="line">      dumpThreadStateToOutputs(<span class="string">"ThreadState-startActivityTimeout.txt"</span>);</span><br><span class="line">      startedActivity.cancel(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">          String.format(</span><br><span class="line">              <span class="string">"Could not launch intent %s within %s seconds."</span></span><br><span class="line">                  + <span class="string">" Perhaps the main thread has not gone idle within a reasonable amount of "</span></span><br><span class="line">                  + <span class="string">"time? There could be an animation or something constantly repainting the "</span></span><br><span class="line">                  + <span class="string">"screen. Or the activity is doing network calls on creation? See the "</span></span><br><span class="line">                  + <span class="string">"threaddump logs. For your reference the last time the event queue was idle "</span></span><br><span class="line">                  + <span class="string">"before your activity launch request was %s and now the last time the queue "</span></span><br><span class="line">                  + <span class="string">"went idle was: %s. If these numbers are the same your activity might be "</span></span><br><span class="line">                  + <span class="string">"hogging the event queue."</span>,</span><br><span class="line">              intent,</span><br><span class="line">              START_ACTIVITY_TIMEOUT_SECONDS,</span><br><span class="line">              lastIdleTimeBeforeLaunch,</span><br><span class="line">              lastIdleTime.get()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExecutionException ee) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not launch activity"</span>, ee.getCause());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">      Thread.currentThread().interrupt();</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"interrupted"</span>, ie);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p>我们看到是通过线程池来开启，获取Future后，设置了超时时间45s。在我们设置activity有问题时经常出现</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li>真机运行可能需要安装应用后开启<strong>手机允许后台弹出界面</strong>权限</li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/notes/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
      <url>/notes/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>免费搭建个人博客,可以使用github+hexo来完成</p><ul><li>hexo<blockquote><p>简洁的博客框架：配置简单,多种主题,可以本地浏览<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a></p></blockquote></li><li>前期准备<blockquote><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git工具</a><br><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a></p></blockquote></li><li>hexo常用命令<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment">//开启服务器,默认http://localhost:4000/</span></span><br><span class="line"><span class="comment">//ctrl+c停止</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment">//部署到远端(github)</span></span><br><span class="line">hexo d</span><br><span class="line"><span class="comment">//清除缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment">//创建文章,默认存放路径通过default_layout参数配置</span></span><br><span class="line">hexo n &#123;标题&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建本地博客"><a href="#创建本地博客" class="headerlink" title="创建本地博客"></a>创建本地博客</h3><ol><li><p>安装Hexo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>新建文件夹,命令行初始化hexo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/hexo-files.png" alt="链接图片" title="hexo-file"><br>scaffolds文件夹：一些模板文件,后面会进行修改<br>source文件夹：一些编译需要的,如文章<br>themes文件夹：存放主题<br>_config.yml文件：博客的主要配置<br>package.json文件：一些依赖的插件</p><ol start="3"><li>预览博客<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ol><p>预览一下默认的博客<br>public文件夹中即为生成的静态页面</p><ol start="4"><li>改变主题<br>在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网</a>找到我们喜欢的主题,根据主题说明配置即可<h3 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h3>在github上创建仓库名字为：{名字}.github.io 的仓库<br>在根目录的_config.yml文件进行配置,参考如下<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">xxx的博客</span><span class="comment"># 修改</span></span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="attr">author:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-cn</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://xxx.github.io/</span> <span class="comment"># 修改</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:category/:title.html</span> <span class="comment"># 文章的url</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">    lang:</span> <span class="string">en</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">随笔</span> <span class="comment"># 默认页面</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line">    <span class="string">随笔:</span> <span class="string">notes</span>   <span class="comment">#分类  </span></span><br><span class="line"><span class="attr">tag_map:</span> <span class="comment"># 标签</span></span><br><span class="line"><span class="attr">    Java:</span> <span class="string">Java</span></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">xxx</span><span class="comment">#修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/xxx</span> <span class="comment">#修改 为仓库地址</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ol><p>重点是deploy属性,修改为自己的仓库地址<br>也可以使用ssh来配置,也可以直接使用https的地址<br>发布：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>.deploy_git文件即为与git仓库关联的文件夹</p><h3 id="配置模板"><a href="#配置模板" class="headerlink" title="配置模板"></a>配置模板</h3><p>在scaffolds文件夹中,可以配置我们创建文章的模板<br>post.md配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/images/xx.png</span></span><br><span class="line"><span class="attr">authorDesc:</span> </span><br><span class="line"><span class="attr">categories:</span> <span class="comment"># 分类</span></span><br><span class="line"><span class="attr">tags:</span><span class="comment">#标签</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Java</span></span><br><span class="line"><span class="attr">photos:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">xxx.jpg</span><span class="comment">#缩略图</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>这样我们创建文章的时候，会根据配置生成</p><h3 id="关于标签"><a href="#关于标签" class="headerlink" title="关于标签"></a>关于标签</h3><p>我们在打开标签页面的时候可能为空<br>原因是public\tags目录下没有index.html</p><ul><li>创建tags<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page tags</span><br></pre></td></tr></table></figure></li></ul><p>生成source/tags/index.md文件<br>配置index.md标签文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-06</span><span class="bullet">-19</span> <span class="number">15</span><span class="string">:02:26</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>根_config.yml添加tag_map列表<br>文章中添加标签</p><h3 id="关于插件安装"><a href="#关于插件安装" class="headerlink" title="关于插件安装"></a>关于插件安装</h3><p>插件都可通过<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">官网</a>来寻找如何配置的<br>例如搜索插件<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">插件配置</a></p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li>配置时冒号后面需要有空格</li><li>安装插件报错<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxxA@<span class="number">10.0</span>.1 <span class="keyword">requires</span> a peer of xxxB@&gt;= <span class="number">4.12</span>.1 but none is</span><br><span class="line">installed. You must install peer dependencies yourself.</span><br></pre></td></tr></table></figure></li></ul><p>我们可以直接根据提示，安装必要的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxxB@<span class="number">4</span>. xxxB@<span class="number">10</span>. --save-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
